// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Change status of MultipleChoice on onChange with lots of options 1`] = `
<MultipleChoice
  choices={Array []}
  error={null}
  errorSubInfo={null}
  heading={null}
  inputStyle="inline"
  isRequired={false}
  label="MultipleChoice"
  labelHidden={false}
  name="choice[]"
  onBlur={[Function]}
  onChange={[Function]}
  onFocus={[Function]}
  options={
    Array [
      Object {
        "id": "option-1",
        "isChecked": false,
        "label": "option 1",
        "value": "option-1",
      },
      Object {
        "id": "option-2",
        "isChecked": false,
        "label": "option 2",
        "value": "option-2",
      },
      Object {
        "id": "option-3",
        "isChecked": false,
        "label": "option 3",
        "value": "option-2",
      },
      Object {
        "id": "option-4",
        "isChecked": false,
        "label": "option 4",
        "value": "option-4",
      },
    ]
  }
  query={Object {}}
  reference={[Function]}
  requiredLabel=""
>
  <div
    className="formGroup formGroupMultipleChoice inline"
    id="choice[]-container"
  >
    <Label
      classNames="inlineLabel"
      id=""
      isTitle={true}
      labelHidden={false}
      value="MultipleChoice"
    >
      <div
        className="inlineLabel controlLabel "
      >
        MultipleChoice
      </div>
    </Label>
    <div
      className="inputContainer"
    >
      <div
        className="choice"
        key="option-1"
      >
        <input
          checked={true}
          className="formControl"
          id="choice[]option-1"
          key="option-1"
          name="choice[]"
          onBlur={[Function]}
          onChange={[Function]}
          onFocus={[Function]}
          required={false}
          type="checkbox"
          value="option-1"
        />
        <label
          htmlFor="choice[]option-1"
        >
          option 1
        </label>
      </div>
      <div
        className="choice"
        key="option-2"
      >
        <input
          checked={false}
          className="formControl"
          id="choice[]option-2"
          key="option-2"
          name="choice[]"
          onBlur={[Function]}
          onChange={[Function]}
          onFocus={[Function]}
          required={false}
          type="checkbox"
          value="option-2"
        />
        <label
          htmlFor="choice[]option-2"
        >
          option 2
        </label>
      </div>
      <div
        className="choice"
        key="option-3"
      >
        <input
          checked={false}
          className="formControl"
          id="choice[]option-3"
          key="option-3"
          name="choice[]"
          onBlur={[Function]}
          onChange={[Function]}
          onFocus={[Function]}
          required={false}
          type="checkbox"
          value="option-2"
        />
        <label
          htmlFor="choice[]option-3"
        >
          option 3
        </label>
      </div>
      <div
        className="choice"
        key="option-4"
      >
        <input
          checked={true}
          className="formControl"
          id="choice[]option-4"
          key="option-4"
          name="choice[]"
          onBlur={[Function]}
          onChange={[Function]}
          onFocus={[Function]}
          required={false}
          type="checkbox"
          value="option-4"
        />
        <label
          htmlFor="choice[]option-4"
        >
          option 4
        </label>
      </div>
    </div>
  </div>
</MultipleChoice>
`;

exports[`Changes status on MultipleChoice onChange 1`] = `
<MultipleChoice
  choices={Array []}
  error={null}
  errorSubInfo={null}
  heading={null}
  inputStyle="inline"
  isRequired={true}
  label="Test"
  labelHidden={false}
  name="choice[]"
  onBlur={[Function]}
  onChange={
    [MockFunction] {
      "calls": Array [
        Array [
          Object {
            "id": "option-1",
            "isChecked": false,
            "label": "test",
            "value": "test",
          },
          Array [
            Object {
              "id": "option-1",
              "isChecked": true,
              "label": "test",
              "value": "test",
            },
          ],
        ],
      ],
      "results": Array [
        Object {
          "type": "return",
          "value": undefined,
        },
      ],
    }
  }
  onFocus={[Function]}
  options={
    Array [
      Object {
        "id": "option-1",
        "isChecked": false,
        "label": "test",
        "value": "test",
      },
    ]
  }
  query={Object {}}
  reference={[Function]}
  requiredLabel=""
>
  <div
    className="formGroup formGroupMultipleChoice inline"
    id="choice[]-container"
  >
    <Label
      classNames="inlineLabel"
      id=""
      isTitle={true}
      labelHidden={false}
      value="Test"
    >
      <div
        className="inlineLabel controlLabel "
      >
        Test
      </div>
    </Label>
    <div
      className="inputContainer"
    >
      <div
        className="choice"
        key="option-1"
      >
        <input
          checked={true}
          className="formControl"
          id="choice[]option-1"
          key="option-1"
          name="choice[]"
          onBlur={[Function]}
          onChange={[Function]}
          onFocus={[Function]}
          required={true}
          type="checkbox"
          value="test"
        />
        <label
          htmlFor="choice[]option-1"
        >
          test
        </label>
      </div>
    </div>
  </div>
</MultipleChoice>
`;

exports[`Renders MultipleChoice with inputStyle buttons without crashing 1`] = `
<div
  className="formGroup formGroupMultipleChoice buttons"
  id="choice[]-container"
>
  
  <div
    className=" controlLabel "
  >
    Button Choice
  </div>
  <div
    className="inputContainer"
  >
    <div
      className="choice"
    >
      <input
        checked={false}
        className="formControl"
        id="choice[]option-1"
        name="choice[]"
        onBlur={[Function]}
        onChange={[Function]}
        onFocus={[Function]}
        required={true}
        type="checkbox"
        value="test"
      />
      <label
        htmlFor="choice[]option-1"
      >
        test
      </label>
    </div>
  </div>
</div>
`;

exports[`Renders MultipleChoice without crashing 1`] = `
<div
  className="formGroup formGroupMultipleChoice inline"
  id="choice[]-container"
>
  
  <div
    className="inlineLabel controlLabel "
  >
    Test
  </div>
  <div
    className="inputContainer"
  >
    <div
      className="choice"
    >
      <input
        checked={false}
        className="formControl"
        id="choice[]option-1"
        name="choice[]"
        onBlur={[Function]}
        onChange={[Function]}
        onFocus={[Function]}
        required={true}
        type="checkbox"
        value="test"
      />
      <label
        htmlFor="choice[]option-1"
      >
        test
      </label>
    </div>
  </div>
</div>
`;

exports[`Renders MultipleCoices without crashing 1`] = `
<div
  className="formGroup formGroupMultipleChoice inline"
  id="choice[]-container"
>
  
  <div
    className="inlineLabel controlLabel "
  >
    MultipleChoice
  </div>
  <div
    className="inputContainer"
  >
    <div
      className="choice"
    >
      <input
        checked={false}
        className="formControl"
        id="choice[]option-1"
        name="choice[]"
        onBlur={[Function]}
        onChange={[Function]}
        onFocus={[Function]}
        required={false}
        type="checkbox"
        value="option-1"
      />
      <label
        htmlFor="choice[]option-1"
      >
        option 1
      </label>
    </div>
    <div
      className="choice"
    >
      <input
        checked={false}
        className="formControl"
        id="choice[]option-2"
        name="choice[]"
        onBlur={[Function]}
        onChange={[Function]}
        onFocus={[Function]}
        required={false}
        type="checkbox"
        value="option-2"
      />
      <label
        htmlFor="choice[]option-2"
      >
        option 2
      </label>
    </div>
    <div
      className="choice"
    >
      <input
        checked={false}
        className="formControl"
        id="choice[]option-3"
        name="choice[]"
        onBlur={[Function]}
        onChange={[Function]}
        onFocus={[Function]}
        required={false}
        type="checkbox"
        value="option-2"
      />
      <label
        htmlFor="choice[]option-3"
      >
        option 3
      </label>
    </div>
    <div
      className="choice"
    >
      <input
        checked={false}
        className="formControl"
        id="choice[]option-4"
        name="choice[]"
        onBlur={[Function]}
        onChange={[Function]}
        onFocus={[Function]}
        required={false}
        type="checkbox"
        value="option-4"
      />
      <label
        htmlFor="choice[]option-4"
      >
        option 4
      </label>
    </div>
  </div>
</div>
`;

exports[`Renders an error if errors prop is set 1`] = `
<MultipleChoice
  choices={Array []}
  error="error"
  errorSubInfo="Subinfo"
  heading={null}
  inputStyle="buttons"
  isRequired={true}
  label="Button Choice"
  labelHidden={false}
  name="choice[]"
  onBlur={[Function]}
  onChange={[Function]}
  onFocus={[Function]}
  options={
    Array [
      Object {
        "id": "option-1",
        "isChecked": false,
        "label": "test",
        "value": "test",
      },
    ]
  }
  query={Object {}}
  reference={[Function]}
  requiredLabel=""
>
  <div
    className="formGroup formGroupMultipleChoice buttons"
    id="choice[]-container"
  >
    <Label
      classNames=""
      id=""
      isTitle={true}
      labelHidden={false}
      value="Button Choice"
    >
      <div
        className=" controlLabel "
      >
        Button Choice
      </div>
    </Label>
    <div
      className="inputContainer"
    >
      <div
        className="choice"
        key="option-1"
      >
        <input
          checked={false}
          className="formControl"
          id="choice[]option-1"
          key="option-1"
          name="choice[]"
          onBlur={[Function]}
          onChange={[Function]}
          onFocus={[Function]}
          required={true}
          type="checkbox"
          value="test"
        />
        <label
          htmlFor="choice[]option-1"
        >
          test
        </label>
      </div>
    </div>
    <Error
      id={null}
      info="error"
      subInfo="Subinfo"
    >
      <span
        className="error"
      >
        <strong
          className="info"
        >
          error
        </strong>
        Subinfo
      </span>
    </Error>
  </div>
</MultipleChoice>
`;

exports[`Renders deprecated MultipleChoice without crashing 1`] = `
<div
  className="formGroup formGroupMultipleChoice inline"
  id="choice[]-container"
>
  
  <div
    className="inlineLabel controlLabel "
  >
    Test
  </div>
  <div
    className="inputContainer"
  >
    <div
      className="choice"
    >
      <input
        checked={false}
        className="formControl"
        id="choice[]option-1"
        name="choice[]"
        onBlur={[Function]}
        onChange={[Function]}
        onFocus={[Function]}
        required={true}
        type="checkbox"
        value="test"
      />
      <label
        htmlFor="choice[]option-1"
      >
        test
      </label>
    </div>
  </div>
</div>
`;
