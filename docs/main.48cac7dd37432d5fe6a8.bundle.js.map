{"version":3,"file":"main.48cac7dd37432d5fe6a8.bundle.js","sources":["webpack:///./src/components/Label/index.jsx"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport ThemeContext from 'utils/themeContext';\nimport themeable from 'utils/theming';\n\nimport sharedStyles from '../index.scss';\n\nexport default function Label ({\n  classNames,\n  id,\n  isTitle,\n  labelHidden,\n  value,\n}) {\n  return (\n    <ThemeContext.Consumer>\n      {(context) => {\n        const theme = themeable({...sharedStyles, ...context});\n        const hidden = labelHidden ? 'srOnly' : '';\n        const allClassNames = `${classNames} controlLabel ${hidden}`.split(' ');\n\n        /**\n         * For checkbox groups or radio button groups you may want\n         * to have a title that looks like a label\n         *\n         * @return {ReactElement} [Returns a div with the label styles]\n         */\n        if (isTitle) {\n          return <div className={theme(...allClassNames)}>{value}</div>;\n        }\n\n        /**\n         * generates a label or div representing the label of a group of fields\n         *\n         * @return {ReactElement} [Either returns a label or div or a react element]\n         */\n        if (typeof value === 'string') {\n          return (\n            <label\n              htmlFor={id}\n              className={theme(...allClassNames)}\n            >\n              {value}\n            </label>\n          );\n        }\n\n        // We don't simply put a more complex element inside a label to prevent a\n        // clickable element like a link or button inside a label\n        // However to also add the labelContainer class, we need to return a cloned\n        // element and not just the label - element itself\n        return React.cloneElement(\n          value,\n          {\n            ...value.props,\n            className: theme(...allClassNames),\n          },\n        );\n      }}\n    </ThemeContext.Consumer>\n  );\n}\n\nLabel.propTypes = {\n  classNames: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.array,\n  ]),\n  id: PropTypes.string,\n  isTitle: PropTypes.bool,\n  labelHidden: PropTypes.bool,\n  value: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.object,\n  ]).isRequired,\n};\n\nLabel.defaultProps = {\n  classNames: '',\n  id: '',\n  isTitle: false,\n  labelHidden: false,\n};\n"],"mappings":"AAQA","sourceRoot":""}